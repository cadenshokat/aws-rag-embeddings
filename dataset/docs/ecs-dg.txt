Amazon Elastic Container Service

Developer Guide

What is Amazon Elastic Container Service?
Amazon Elastic Container Service (Amazon ECS) is a fully managed container orchestration service
that helps you easily deploy, manage, and scale containerized applications. As a fully managed
service, Amazon ECS comes with AWS conﬁguration and operational best practices built-in. It's
integrated with both AWS tools, such as Amazon Elastic Container Registry, and third-party tools,
such as Docker. This integration makes it easier for teams to focus on building the applications, not
the environment. You can run and scale your container workloads across AWS Regions in the cloud,
and on-premises, without the complexity of managing a control plane.

Terminology and components
There are three layers in Amazon ECS:
• Capacity - The infrastructure where your containers run
• Controller - Deploy and manage your applications that run on the containers
• Provisioning - The tools that you can use to interface with the scheduler to deploy and manage
your applications and containers
The following diagram shows the Amazon ECS layers.

Terminology and components

1

Amazon Elastic Container Service

Developer Guide

The capacity is the infrastructure where your containers run. The following is an overview of the
capacity options:
• Amazon EC2 instances in the AWS cloud
You choose the instance type, the number of instances, and manage the capacity.
• Serverless (AWS Fargate) in the AWS cloud
Fargate is a serverless, pay-as-you-go compute engine. With Fargate you don't need to manage
servers, handle capacity planning, or isolate container workloads for security.
• On-premises virtual machines (VM) or servers
Amazon ECS Anywhere provides support for registering an external instance such as an onpremises server or virtual machine (VM), to your Amazon ECS cluster.
The Amazon ECS scheduler is the software that manages your applications.
Terminology and components

2

Amazon Elastic Container Service

Developer Guide

Features
Amazon ECS provides the following high-level features:
Task deﬁnition
The blueprint for the application.
Cluster
The infrastructure your application runs on.
Task
An application such as a batch job that performs work, and then stops.
Service
A long running stateless application.
Account Setting
Allows access to features.
Cluster Auto Scaling
Amazon ECS manages the scaling of Amazon EC2 instances that are registered to your cluster.
Service Auto Scaling
Amazon ECS increases or decreases the desired number of tasks in your service automatically.

Provisioning
There are multiple options for provisioning Amazon ECS:
• AWS Management Console — Provides a web interface that you can use to access your Amazon
ECS resources.
• AWS Command Line Interface (AWS CLI) — Provides commands for a broad set of AWS services,
including Amazon ECS. It's supported on Windows, Mac, and Linux. For more information, see
AWS Command Line Interface.
• AWS SDKs — Provides language-speciﬁc APIs and takes care of many of the connection details.
These include calculating signatures, handling request retries, and error handling. For more
information, see AWS SDKs.
Features

3

Amazon Elastic Container Service

Developer Guide

• AWS CDK — Provides an open-source software development framework that you can
use to model and provision your cloud application resources using familiar programming
languages. The AWS CDK provisions your resources in a safe, repeatable manner through AWS
CloudFormation.

Pricing
Amazon ECS pricing depends on the capacity option you choose for your containers.
• Amazon ECS pricing – Pricing information for Amazon ECS.
• AWS Fargate pricing – Pricing information for Fargate.

Related services
Services to use with Amazon ECS
You can use other AWS services to help you deploy yours tasks and services on Amazon ECS.
Amazon EC2 Auto Scaling
Helps ensure you have the correct number of Amazon EC2 instances available to handle the
load for your application.
Amazon CloudWatch
Monitor your services and tasks.
Amazon Elastic Container Registry
Store and manage container images.
Elastic Load Balancing
Automatically distribute incoming service traﬃc.
Amazon GuardDuty
Detect potentially unauthorized or malicious use of your container instances and workloads.

Pricing

4

Amazon Elastic Container Service

Developer Guide

Learn how to create and use Amazon ECS resources
The following guides provide an introduction to the tools available to access Amazon ECS and
introductory procedures to run containers. Docker basics takes you through the basic steps to
create a Docker container image and upload it to an Amazon ECR private repository. The getting
started guides walk you through using the AWS Copilot command line interface and the AWS
Management Console to complete the common tasks to run your containers on Amazon ECS and
AWS Fargate.
Contents
• Set up to use Amazon ECS
• Creating a container image for use on Amazon ECS
• Learn how to create an Amazon ECS Linux task for the Fargate launch type
• Learn how to create an Amazon ECS Windows task for the Fargate launch type
• Learn how to create an Amazon ECS Windows task for the EC2 launch type
• Creating Amazon ECS resources using the AWS CDK
• Creating Amazon ECS resources using the AWS Copilot command line interface

Set up to use Amazon ECS
If you've already signed up for Amazon Web Services (AWS) and have been using Amazon Elastic
Compute Cloud (Amazon EC2), you are close to being able to use Amazon ECS. The set-up process
for the two services is similar. The following guide prepares you for launching your ﬁrst Amazon
ECS cluster.
Complete the following tasks to get set up for Amazon ECS.

AWS Management Console
The AWS Management Console is a browser-based interface for managing Amazon ECS resources.
The console provides a visual overview of the service, making it easy to explore Amazon ECS
features and functions without needing to use additional tools. Many related tutorials and
walkthroughs are available that can guide you through use of the console.
For a tutorial that guides you through the console, see Learn how to create and use Amazon ECS
resources.
Set up

5

Amazon Elastic Container Service

Developer Guide

When starting out, many customers prefer using the console because it provides instant visual
feedback on whether the actions they take succeed. AWS customers that are familiar with the AWS
Management Console, can easily manage related resources such as load balancers and Amazon EC2
instances.
Start with the AWS Management Console.

Sign up for an AWS account
If you do not have an AWS account, complete the following steps to create one.
To sign up for an AWS account
1.

Open https://portal.aws.amazon.com/billing/signup.

2.

Follow the online instructions.
Part of the sign-up procedure involves receiving a phone call or text message and entering a
veriﬁcation code on the phone keypad.
When you sign up for an AWS account, an AWS account root user is created. The root user
has access to all AWS services and resources in the account. As a security best practice, assign
administrative access to a user, and use only the root user to perform tasks that require root
user access.

AWS sends you a conﬁrmation email after the sign-up process is complete. At any time, you can
view your current account activity and manage your account by going to https://aws.amazon.com/
and choosing My Account.

Create a user with administrative access
After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity
Center, and create an administrative user so that you don't use the root user for everyday tasks.
Secure your AWS account root user
1.

Sign in to the AWS Management Console as the account owner by choosing Root user and
entering your AWS account email address. On the next page, enter your password.
For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User
Guide.

Sign up for an AWS account

6

Amazon Elastic Container Service

2.

Developer Guide

Turn on multi-factor authentication (MFA) for your root user.
For instructions, see Enable a virtual MFA device for your AWS account root user (console) in
the IAM User Guide.

Create a user with administrative access
1.

Enable IAM Identity Center.
For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User
Guide.

2.

In IAM Identity Center, grant administrative access to a user.
For a tutorial about using the IAM Identity Center directory as your identity source, see
Conﬁgure user access with the default IAM Identity Center directory in the AWS IAM Identity
Center User Guide.

Sign in as the user with administrative access
•

To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email
address when you created the IAM Identity Center user.
For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in
the AWS Sign-In User Guide.

Assign access to additional users
1.

In IAM Identity Center, create a permission set that follows the best practice of applying leastprivilege permissions.
For instructions, see Create a permission set in the AWS IAM Identity Center User Guide.

2.

Assign users to a group, and then assign single sign-on access to the group.
For instructions, see Add groups in the AWS IAM Identity Center User Guide.

Create a user with administrative access

7

Amazon Elastic Container Service

Developer Guide

Create a virtual private cloud
You can use Amazon Virtual Private Cloud (Amazon VPC) to launch AWS resources into a virtual
network that you've deﬁned. We strongly suggest that you launch your container instances in a
VPC.
If you have a default VPC, you can skip this section and move to the next task, Create a security
group. To determine whether you have a default VPC, see Work with your default VPC and default
subnets in the Amazon VPC User Guide. Otherwise, you can create a nondefault VPC in your account
using the steps below.
For information about how to create a VPC, see Create a VPC in the Amazon VPC User Guide, and
use the following table to determine what options to select.

Option

Value

Resources to create

VPC only

Name

Optionally provide a name for
your VPC.

IPv4 CIDR block

IPv4 CIDR manual input
The CIDR block size must
have a size between /16
and /28.

IPv6 CIDR block

No IPv6 CIDR block

Tenancy

Default

For more information about Amazon VPC, see What is Amazon VPC? in the Amazon VPC User Guide.

Create a security group
Security groups act as a ﬁrewall for associated container instances, controlling both inbound
and outbound traﬃc at the container instance level. You can add rules to a security group that
enable you to connect to your container instance from your IP address using SSH. You can also add
Create a virtual private cloud

8

Amazon Elastic Container Service

Developer Guide

rules that allow inbound and outbound HTTP and HTTPS access from anywhere. Add any rules to
open ports that are required by your tasks. Container instances require external network access to
communicate with the Amazon ECS service endpoint.
If you plan to launch container instances in multiple Regions, you need to create a security group
in each Region. For more information, see Regions and Availability Zones in the Amazon EC2 User
Guide.
Tip
You need the public IP address of your local computer, which you can get using a service.
For example, we provide the following service: http://checkip.amazonaws.com/ or https://
checkip.amazonaws.com/. To locate another service that provides your IP address, use the
search phrase "what is my IP address." If you are connecting through an internet service
provider (ISP) or from behind a ﬁrewall without a static IP address, you must ﬁnd out the
range of IP addresses used by client computers.

For information about how to create a security group, see Create a security group for your Amazon
EC2 instance in the Amazon EC2 User Guide and use the following table to determine what options
to select.
Option

Value

Region

The same Region in which you
created your key pair.

Name

A name that is easy for you to
remember, such as ecs-insta
nces-default-cluster.

VPC

The default VPC (marked with
"(default)").
Note
If your account
supports Amazon EC2
Classic, select the VPC

Create a security group

9

Amazon Elastic Container Service

Option

Developer Guide

Value
that you created in
the previous task.

For information about the outbound rules to add for your use cases, see Security group rules for
diﬀerent use cases in the Amazon EC2 User Guide.
Amazon ECS container instances do not require any inbound ports to be open. However, you might
want to add an SSH rule so you can log into the container instance and examine the tasks with
Docker commands. You can also add rules for HTTP and HTTPS if you want your container instance
to host a task that runs a web server. Container instances do require external network access to
communicate with the Amazon ECS service endpoint. Complete the following steps to add these
optional security group rules.
Add the following three inbound rules to your security group.For information about how to create
a security group, see Conﬁgure security group rules in the Amazon EC2 User Guide.

Option

Value

HTTP rule

Type: HTTP
Source: Anywhere
(0.0.0.0/0 )
This option automatically
adds the 0.0.0.0/0 IPv4 CIDR
block as the source. This is
acceptable for a short time
in a test environment, but
it's unsafe in production
environments. In production,
authorize only a speciﬁc IP
address or range of addresses
to access your instance.

HTTPS rule
Create a security group

Type: HTTPS
10

Amazon Elastic Container Service

Option

Developer Guide

Value
Source: Anywhere
(0.0.0.0/0 )
This is acceptable for a short
time in a test environment,
but it's unsafe in productio
n environments. In productio
n, authorize only a speciﬁc IP
address or range of addresses
to access your instance.

Create a security group

11

Amazon Elastic Container Service

Developer Guide

Option

Value

SSH rule

Type: SSH
Source: Custom, specify the
public IP address of your
computer or network in
CIDR notation. To specify an
individual IP address in CIDR
notation, add the routing
preﬁx /32. For example, if
your IP address is 203.0.113
.25 , specify 203.0.113
.25/32 . If your company
allocates addresses from
a range, specify the entire
range, such as 203.0.113
.0/24 .
Important
For security reasons,
we don't recommend
that you allow
SSH access from
all IP addresses
(0.0.0.0/0 ) to
your instance, except
for testing purposes
and only for a short
time.

Create the credentials to connect to your EC2 instance
For Amazon ECS, a key pair is only needed if you intend on using the EC2 launch type.

Create the credentials to connect to your EC2 instance

12

Amazon Elastic Container Service

Developer Guide

AWS uses public-key cryptography to secure the login information for your instance. A Linux
instance, such as an Amazon ECS container instance, has no password to use for SSH access. You
use a key pair to log in to your instance securely. You specify the name of the key pair when you
launch your container instance, then provide the private key when you log in using SSH.
If you haven't created a key pair already, you can create one using the Amazon EC2 console. If you
plan to launch instances in multiple regions, you'll need to create a key pair in each region. For
more information about regions, see Regions and Availability Zones in the Amazon EC2 User Guide.
To create a key pair
•

Use the Amazon EC2 console to create a key pair. For more information about creating a key
pair, see Create a key pair in the Amazon EC2 User Guide.

For information about how to connect to your instance, see Connect to your Linux instance in the
Amazon EC2 User Guide.

Install the AWS CLI
The AWS Management Console can be used to manage all operations manually with Amazon ECS.
However, you can install the AWS CLI on your local desktop or a developer box so that you can
build scripts that can automate common management tasks in Amazon ECS.
To use the AWS CLI with Amazon ECS, install the latest AWS CLI version. For information about
installing the AWS CLI or upgrading it to the latest version, see Installing or updating to the latest
version of the AWS CLI in the AWS Command Line Interface User Guide.
The AWS Command Line Interface (AWS CLI) is a uniﬁed tool that you can use to manage your AWS
services. With this one tool alone, you can both control multiple AWS services and automate these
services through scripts. The Amazon ECS commands in the AWS CLI are a reﬂection of the Amazon
ECS API.
The AWS CLI is suitable for customers who prefer and are used to scripting and interfacing with
a command line tool and know exactly which actions they want to perform on their Amazon ECS
resources. The AWS CLI is also helpful to customers who want to familiarize themselves with the
Amazon ECS APIs. Customers can use the AWS CLI to perform a number of operations on Amazon
ECS resources, including Create, Read, Update, and Delete operations, directly from the command
line interface.
Install the AWS CLI

13

Amazon Elastic Container Service

Developer Guide

Use the AWS CLI if you are or want to become familiar with the Amazon ECS APIs and
corresponding CLI commands and want to write automated scripts and perform speciﬁc actions on
Amazon ECS resources.
AWS also provides the command line tools AWS Tools for Windows PowerShell. For more
information, see the AWS Tools for Windows PowerShell User Guide.

Next steps for using Amazon ECS
After installing the AWS CLI, there are many diﬀerent tools you can utilize as you continue to use
Amazon ECS. The following links explain what some of those tools are and give examples of how to
use them with Amazon ECS.
• Create your ﬁrst container image with Docker and push it to Amazon ECR for use in your Amazon
ECS task deﬁnitions.
• Learn how to create an Amazon ECS Linux task for the Fargate launch type.
• Learn how to create an Amazon ECS Windows task for the Fargate launch type.
• Learn how to create an Amazon ECS Windows task for the EC2 launch type.
• Using your preferred programming language, deﬁne infrastructure or architecture as code with
the Creating Amazon ECS resources using the AWS CDK.
• Deﬁne and manage all AWS resources in your environment with automated deployment using
Using Amazon ECS with AWS CloudFormation.
• Use the complete Creating Amazon ECS resources using the AWS Copilot command line interface
end-to-end developer workﬂow to create, release, and operate container applications that
comply with AWS best practices for infrastructure.

Creating a container image for use on Amazon ECS
Amazon ECS uses Docker images in task deﬁnitions to launch containers. Docker is a technology
that provides the tools for you to build, run, test, and deploy distributed applications in containers.
Amazon ECS schedules containerized applications on to container instances or on to AWS Fargate.
Containerized applications are packaged as container images. This example creates a container
image for a web server.
You can create your ﬁrst Docker image, and then push that image to Amazon ECR, which is a
container registry, for use in your Amazon ECS task deﬁnitions. This walkthrough assumes that you
Next steps for using Amazon ECS

14

Amazon Elastic Container Service

Developer Guide

possess a basic understanding of what Docker is and how it works. For more information about
Docker, see What is Docker? and the Docker documentation.

Prerequisites
Before you begin, ensure the following prerequisites are met.
• Ensure you have completed the Amazon ECR setup steps. For more information, see Moving an
image through its lifecycle in Amazon ECR in the Amazon Elastic Container Registry User Guide.
• Your user has the required IAM permissions to access and use the Amazon ECR service. For more
information, see Amazon ECR managed policies.
• You have Docker installed. For Docker installation steps for Amazon Linux 2023, see Installing
Docker on AL2023. For all other operating systems, see the Docker documentation at Docker
Desktop overview.
• You have the AWS CLI installed and conﬁgured. For more information, see Installing or updating
to the latest version of the AWS CLI in the AWS Command Line Interface User Guide.
If you don't have or need a local development environment and you prefer to use an Amazon EC2
instance to use Docker, we provide the following steps to launch an Amazon EC2 instance using
Amazon Linux 2023 and install Docker Engine and the Docker CLI.
Installing Docker on AL2023
Docker is available on many diﬀerent operating systems, including most modern Linux
distributions, like Ubuntu, and even macOS and Windows. For more information about how to
install Docker on your particular operating system, go to the Docker installation guide.
You do not need a local development system to use Docker. If you are using Amazon EC2 already,
you can launch an Amazon Linux 2023 instance and install Docker to get started.
If you already have Docker installed, skip to Create a Docker image.
To install Docker on an Amazon EC2 instance using an Amazon Linux 2023 AMI
1.

Launch an instance with the latest Amazon Linux 2023 AMI. For more information, see Launch
an EC2 instance using the launch instance wizard in the console in the Amazon EC2 User Guide.

2.

Connect to your instance. For more information, see Connect to your EC2 instance in the
Amazon EC2 User Guide.

3.

Update the installed packages and package cache on your instance.

Prerequisites

15

Amazon Elastic Container Service

Developer Guide

sudo yum update -y

4.

Install the most recent Docker Community Edition package.
sudo yum install docker

5.

Start the Docker service.
sudo service docker start

6.

Add the ec2-user to the docker group so you can execute Docker commands without using
sudo.
sudo usermod -a -G docker ec2-user

7.

Log out and log back in again to pick up the new docker group permissions. You can
accomplish this by closing your current SSH terminal window and reconnecting to your
instance in a new one. Your new SSH session will have the appropriate docker group
permissions.

8.

Verify that the ec2-user can run Docker commands without sudo.
docker info

Note
In some cases, you may need to reboot your instance to provide permissions for the
ec2-user to access the Docker daemon. Try rebooting your instance if you see the
following error:
Cannot connect to the Docker daemon. Is the docker daemon running on this
host?

Create a Docker image
Amazon ECS task deﬁnitions use container images to launch containers on the container instances
in your clusters. In this section, you create a Docker image of a simple web application, and test
Create a Docker image

16

Amazon Elastic Container Service

Developer Guide

it on your local system or Amazon EC2 instance, and then push the image to the Amazon ECR
container registry so you can use it in an Amazon ECS task deﬁnition.
To create a Docker image of a simple web application
1.

Create a ﬁle called Dockerfile. A Dockerﬁle is a manifest that describes the base image
to use for your Docker image and what you want installed and running on it. For more
information about Dockerﬁles, go to the Dockerﬁle Reference.
touch Dockerfile

2.

Edit the Dockerfile you just created and add the following content.
FROM public.ecr.aws/amazonlinux/amazonlinux:latest
# Update installed packages and install Apache
RUN yum update -y && \
yum install -y httpd
# Write hello world message
RUN echo 'Hello World!' > /var/www/html/index.html
# Configure Apache
RUN echo 'mkdir -p /var/run/httpd' >> /root/run_apache.sh && \
echo 'mkdir -p /var/lock/httpd' >> /root/run_apache.sh && \
echo '/usr/sbin/httpd -D FOREGROUND' >> /root/run_apache.sh && \
chmod 755 /root/run_apache.sh
EXPOSE 80
CMD /root/run_apache.sh

This Dockerﬁle uses the public Amazon Linux 2023 image hosted on Amazon ECR Public.
The RUN instructions update the package caches, installs some software packages for the
web server, and then write the "Hello World!" content to the web servers document root. The
EXPOSE instruction means that port 80 on the container is the one that is listening, and the
CMD instruction starts the web server.
3.

Build the Docker image from your Dockerﬁle.

Create a Docker image

17

Amazon Elastic Container Service

Developer Guide

Note
Some versions of Docker may require the full path to your Dockerﬁle in the following
command, instead of the relative path shown below.
If you run the command an ARM based system, such as Apple Silicon, use the -platform option "--platform linux/amd64".

docker build -t hello-world .

4.

List your container image.
docker images --filter reference=hello-world

Output:
REPOSITORY
SIZE
hello-world
194MB

5.

TAG

IMAGE ID

CREATED

latest

e9ffedc8c286

4 minutes ago

Run the newly built image. The -p 80:80 option maps the exposed port 80 on the container
to port 80 on the host system.
docker run -t -i -p 80:80 hello-world

Note
Output from the Apache web server is displayed in the terminal window. You can
ignore the "Could not reliably determine the fully qualified domain
name" message.
6.

Open a browser and point to the server that is running Docker and hosting your container.
• If you are using an EC2 instance, this is the Public DNS value for the server, which is the
same address you use to connect to the instance with SSH. Make sure that the security group
for your instance allows inbound traﬃc on port 80.

Create a Docker image

18

Amazon Elastic Container Service

Developer Guide

• If you are running Docker locally, point your browser to http://localhost/.
You should see a web page with your "Hello World!" statement.
7.

Stop the Docker container by typing Ctrl + c.

Push your image to Amazon Elastic Container Registry
Amazon ECR is a managed AWS managed image registry service. You can use the Docker CLI to
push, pull, and manage images in your Amazon ECR repositories. For Amazon ECR product details,
featured customer case studies, and FAQs, see the Amazon Elastic Container Registry product detail
pages.
To tag your image and push it to Amazon ECR
1.

Create an Amazon ECR repository to store your hello-world image. Note the
repositoryUri in the output.
Substitute region, with your AWS Region, for example, us-east-1.
aws ecr create-repository --repository-name hello-repository --region region

Output:
{
"repository": {
"registryId": "aws_account_id",
"repositoryName": "hello-repository",
"repositoryArn": "arn:aws:ecr:region:aws_account_id:repository/hellorepository",
"createdAt": 1505337806.0,
"repositoryUri": "aws_account_id.dkr.ecr.region.amazonaws.com/hellorepository"
}
}

2.

Tag the hello-world image with the repositoryUri value from the previous step.
docker tag hello-world aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository

Push your image to Amazon Elastic Container Registry

19

Amazon Elastic Container Service

3.

Developer Guide

Run the aws ecr get-login-password command. Specify the registry URI you want to
authenticate to. For more information, see Registry Authentication in the Amazon Elastic
Container Registry User Guide.
aws ecr get-login-password --region region | docker login --username AWS -password-stdin aws_account_id.dkr.ecr.region.amazonaws.com

Output:
Login Succeeded

Important
If you receive an error, install or upgrade to the latest version of the AWS CLI. For more
information, see Installing or updating to the latest version of the AWS CLI in the AWS
Command Line Interface User Guide.
4.

Push the image to Amazon ECR with the repositoryUri value from the earlier step.
docker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository

Clean up
To continue on with creating an Amazon ECS task deﬁnition and launching a task with your
container image, skip to the Next steps. When you are done experimenting with your Amazon ECR
image, you can delete the repository so you are not charged for image storage.
aws ecr delete-repository --repository-name hello-repository --region region --force

Next steps
Your task deﬁnitions require a task execution role. For more information, see Amazon ECS task
execution IAM role.
After you have created and pushed your container image to Amazon ECR, you can use that image in
a task deﬁnition. For more information, see one of the following:
• the section called “Learn how to create a Linux task for the Fargate launch type”

Clean up

20

Amazon Elastic Container Service

Developer Guide

• the section called “Learn how to create a Windows task for the Fargate launch type”
• Creating an Amazon ECS Linux task for the Fargate launch type with the AWS CLI

Learn how to create an Amazon ECS Linux task for the Fargate
launch type
Amazon Elastic Container Service (Amazon ECS) is a highly scalable, fast, container management
service that makes it easy to run, stop, and manage your containers. You can host your containers
on a serverless infrastructure that is managed by Amazon ECS by launching your services or tasks
on AWS Fargate. For more information on Fargate, see AWS Fargate for Amazon ECS.
Get started with Amazon ECS on AWS Fargate by using the Fargate launch type for your tasks in
the Regions where Amazon ECS supports AWS Fargate.
Complete the following steps to get started with Amazon ECS on AWS Fargate.

Prerequisites
Before you begin, complete the steps in Set up to use Amazon ECS and that your IAM user has the
permissions speciﬁed in the AdministratorAccess IAM policy example.
The console attempts to automatically create the task execution IAM role, which is required for
Fargate tasks. To ensure that the console is able to create this IAM role, one of the following must
be true:
• Your user has administrator access. For more information, see Set up to use Amazon ECS.
• Your user has the IAM permissions to create a service role. For more information, see Creating a
Role to Delegate Permissions to an AWS Service.
• A user with administrator access has manually created the task execution role so that it is
available on the account to be used. For more information, see Amazon ECS task execution IAM
role.

Important
The security group you select when creating a service with your task deﬁnition must have
port 80 open for inbound traﬃc. Add the following inbound rule to your security group.
Learn how to create a Linux task for the Fargate launch type

21

